name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  schedule:
   - cron: '0 21 * * 0'

permissions:
  actions:  write
  contents: read
  packages: write

jobs:
  binfmt-to-ghcr:
    runs-on: ubuntu-latest
    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from tonistiigi/binfmt
      run: |
        MANIFEST=$(docker manifest inspect tonistiigi/binfmt)
        [ $? -ne 0 ] && exit $?

        I386_DIGEST=$(echo $MANIFEST | jq -r '.manifests[] | select(.platform.architecture == "386") | .digest')
        AMD64_DIGEST=$(echo $MANIFEST | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARMV6_DIGEST=$(echo $MANIFEST | jq -r '.manifests[] | select(.platform.architecture == "arm" and .platform.variant == "v6") | .digest')
        ARMV7_DIGEST=$(echo $MANIFEST | jq -r '.manifests[] | select(.platform.architecture == "arm" and .platform.variant == "v7") | .digest')
        ARM64_DIGEST=$(echo $MANIFEST | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        PPC64LE_DIGEST=$(echo $MANIFEST | jq -r '.manifests[] | select(.platform.architecture == "ppc64le") | .digest')
        RISCV64_DIGEST=$(echo $MANIFEST | jq -r '.manifests[] | select(.platform.architecture == "riscv64") | .digest')
        S390X_DIGEST=$(echo $MANIFEST | jq -r '.manifests[] | select(.platform.architecture == "s390x") | .digest')

        [ -n "$I386_DIGEST" ] && echo "I386_DIGEST=$I386_DIGEST" >> $GITHUB_ENV
        [ -n "$AMD64_DIGEST" ] && echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        [ -n "$ARMV6_DIGEST" ] && echo "ARMV6_DIGEST=$ARMV6_DIGEST" >> $GITHUB_ENV
        [ -n "$ARMV7_DIGEST" ] && echo "ARMV7_DIGEST=$ARMV7_DIGEST" >> $GITHUB_ENV
        [ -n "$ARM64_DIGEST" ] && echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
        [ -n "$PPC64LE_DIGEST" ] && echo "PPC64LE_DIGEST=$PPC64LE_DIGEST" >> $GITHUB_ENV
        [ -n "$RISCV64_DIGEST" ] && echo "RISCV64_DIGEST=$RISCV64_DIGEST" >> $GITHUB_ENV
        [ -n "$S390X_DIGEST" ] && echo "S390X_DIGEST=$S390X_DIGEST" >> $GITHUB_ENV

    - name: Push binfmt to ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          ghcr.io/${{ github.repository_owner }}/binfmt
        push: true
        sources: |
          tonistiigi/binfmt@${{ env.AMD64_DIGEST }}
          tonistiigi/binfmt@${{ env.ARM64_DIGEST }}
          tonistiigi/binfmt@${{ env.ARMV7_DIGEST }}
          tonistiigi/binfmt@${{ env.PPC64LE_DIGEST }}
          tonistiigi/binfmt@${{ env.RISCV64_DIGEST }}
          tonistiigi/binfmt@${{ env.S390X_DIGEST }}

  Upstream:
    needs: binfmt-to-ghcr
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        KALI_VER:
        - rolling
        - bleeding-edge
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: 'phusion/baseimage-docker'
    - name: Add Kali
      run: |
        sed -i 's/Debian)/Debian|Kali)/' image/prepare.sh
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set tags metadata
      uses: docker/metadata-action@v5
      id: meta
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-${{ matrix.KALI_VER }}
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}
          ${{ strategy.job-index == 0 && format('{0}/{1}', secrets.DOCKERHUB_USERNAME, 'kali') || '' }}
          ${{ strategy.job-index == 0 && format('{0}/{1}/{2}', 'ghcr.io', github.repository_owner, 'kali') || '' }}
        tags: |
          upstream
    - name: Build And Push Docker Image
      uses: docker/build-push-action@v5
      id: build
      with:
        push: true
        context: image
        build-args: |
          BASE_IMAGE=kalilinux/kali-${{ matrix.KALI_VER }}
        platforms: linux/amd64,linux/arm64
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:upstream
        cache-to: |
          type=gha,mode=min,ignore-error=true
          type=inline
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  Base:
    runs-on: ubuntu-latest
    needs: Upstream
    strategy:
      fail-fast: false
      matrix:
        KALI_VER:
        - rolling
        - bleeding-edge
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set tags metadata
      uses: docker/metadata-action@v5
      id: meta
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-${{ matrix.KALI_VER }}
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}
          ${{ strategy.job-index == 0 && format('{0}/{1}', secrets.DOCKERHUB_USERNAME, 'kali') || '' }}
          ${{ strategy.job-index == 0 && format('{0}/{1}/{2}', 'ghcr.io', github.repository_owner, 'kali') || '' }}
        tags: |
          base
    - name: Build And Push Docker Image
      uses: docker/build-push-action@v5
      id: build
      with:
        push: true
        context: .
        build-args: |
          KALI_VER=${{ matrix.KALI_VER }}
        target: base
        platforms: linux/amd64,linux/arm64
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:upstream
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:base
        cache-to: |
          type=gha,mode=min,ignore-error=true
          type=inline
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  Labs:
    runs-on: ubuntu-latest
    needs: Base
    strategy:
      fail-fast: false
      matrix:
        KALI_VER:
        - rolling
        - bleeding-edge
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set tags metadata
      uses: docker/metadata-action@v5
      id: meta
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-${{ matrix.KALI_VER }}
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}
          ${{ strategy.job-index == 0 && format('{0}/{1}', secrets.DOCKERHUB_USERNAME, 'kali') || '' }}
          ${{ strategy.job-index == 0 && format('{0}/{1}/{2}', 'ghcr.io', github.repository_owner, 'kali') || '' }}
        tags: |
          labs
          exploitable
          vulnerable
    - name: Build And Push Docker Image
      uses: docker/build-push-action@v5
      id: build
      with:
        push: true
        context: .
        build-args: |
          KALI_VER=${{ matrix.KALI_VER }}
        target: labs
        platforms: linux/amd64,linux/arm64
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:base
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:labs
        cache-to: |
          type=inline
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  Desktop:
    runs-on: ubuntu-latest
    needs: Base
    strategy:
      fail-fast: false
      matrix:
        KALI_VER:
        - rolling
        - bleeding-edge
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set tags metadata
      uses: docker/metadata-action@v5
      id: meta1
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-${{ matrix.KALI_VER }}
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}
          ${{ strategy.job-index == 0 && format('{0}/{1}', secrets.DOCKERHUB_USERNAME, 'kali') || '' }}
          ${{ strategy.job-index == 0 && format('{0}/{1}/{2}', 'ghcr.io', github.repository_owner, 'kali') || '' }}
        tags: |
          desktop
    - name: Set tags metadata
      uses: docker/metadata-action@v5
      id: meta2
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-${{ matrix.KALI_VER }}
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}
          ${{ strategy.job-index == 0 && format('{0}/{1}', secrets.DOCKERHUB_USERNAME, 'kali') || '' }}
          ${{ strategy.job-index == 0 && format('{0}/{1}/{2}', 'ghcr.io', github.repository_owner, 'kali') || '' }}
        tags: |
          latest
          top10
          desktop-top10
    - name: Build And Push Docker Image
      uses: docker/build-push-action@v5
      id: build1
      with:
        push: true
        context: .
        build-args: |
          KALI_VER=${{ matrix.KALI_VER }}
        target: desktop
        platforms: linux/amd64,linux/arm64
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:base
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:desktop
        cache-to: |
          type=gha,mode=min,ignore-error=true
          type=inline
        tags: ${{ steps.meta1.outputs.tags }}
        labels: ${{ steps.meta1.outputs.labels }}
    - name: Build And Push Docker Image
      uses: docker/build-push-action@v5
      id: build2
      with:
        push: true
        context: .
        target: desktop-top10
        platforms: linux/amd64,linux/arm64
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:desktop-top10
        cache-to: |
          type=gha,mode=min,ignore-error=true
          type=inline
        tags: ${{ steps.meta2.outputs.tags }}
        labels: ${{ steps.meta2.outputs.labels }}

  Nethunter:
    runs-on: ubuntu-latest
    needs: Desktop
    strategy:
      fail-fast: false
      matrix:
        KALI_VER:
        - rolling
        - bleeding-edge
        PLATFORM:
        - amd64
        - arm64
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set tags metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository_owner }}/kali-cache
        tags: |
          ${{ matrix.KALI_VER }}-nethunter-${{ matrix.PLATFORM }}
    - name: Build And Push Docker Image
      uses: docker/build-push-action@v5
      with:
        push: true
        context: .
        build-args: |
          KALI_VER=${{ matrix.KALI_VER }}
        target: nethunter
        platforms: linux/${{ matrix.PLATFORM }}
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:latest
          ghcr.io/${{ github.repository_owner }}/kali-cache:${{ matrix.KALI_VER }}-nethunter-${{ matrix.PLATFORM }}
        cache-to: |
          type=inline
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  Merge_Nethunter:
    needs: Nethunter
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Merge Nethunter (rolling)
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-rolling:nethunter
          ghcr.io/${{ github.repository_owner }}/kali-rolling:nethunter
        push: true
        sources: |
          ghcr.io/${{ github.repository_owner }}/kali-cache:rolling-nethunter-amd64
          ghcr.io/${{ github.repository_owner }}/kali-cache:rolling-nethunter-arm64
    - name: Merge Nethunter (bleeding-edge)
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-bleeding-edge:nethunter
          ghcr.io/${{ github.repository_owner }}/kali-bleeding-edge:nethunter
        push: true
        sources: |
          ghcr.io/${{ github.repository_owner }}/kali-cache:bleeding-edge-nethunter-amd64
          ghcr.io/${{ github.repository_owner }}/kali-cache:bleeding-edge-nethunter-arm64

  Tools:
    runs-on: ubuntu-latest
    needs: Desktop
    strategy:
      fail-fast: false
      matrix:
        KALI_VER:
        - rolling
        - bleeding-edge
        TOOL:
        - 802-11
        - bluetooth
        - crypto-stego
        - database
        - detect
        - exploitation
        - forensics
        - fuzzing
        - gpu
        - hardware
        - identify
        - information-gathering
        - passwords
        - post-exploitation
        - protect
        - recover
        - reporting
        - respond
        - reverse-engineering
        - rfid
        - sdr
        - sniffing-spoofing
        - social-engineering
        - voip
        - vulnerability
        - web
        - windows-resources
        - wireless
        PLATFORM:
        - amd64
        - arm64
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set tags metadata
      uses: docker/metadata-action@v5
      id: meta
      with:
        images: |
          ghcr.io/${{ github.repository_owner }}/kali-cache
        tags: |
          ${{ matrix.KALI_VER }}-${{ matrix.TOOL }}-${{ matrix.platform }}
    - name: Build And Push Docker Image
      uses: docker/build-push-action@v5
      with:
        push: true
        context: .
        build-args: |
          KALI_VER=${{ matrix.KALI_VER }}
        target: tool
        platforms: linux/${{ matrix.PLATFORM }}
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:latest
          ghcr.io/${{ github.repository_owner }}/kali-cache:${{ matrix.KALI_VER }}-${{ matrix.TOOL }}-${{ matrix.PLATFORM }}
        cache-to: |
          type=inline
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  Merge_Tools:
    runs-on: ubuntu-latest
    needs: Tools
    strategy:
      fail-fast: false
      matrix:
        TOOL:
        - crypto-stego
        - database
        - detect
        - exploitation
        - forensics
        - fuzzing
        - gpu
        - hardware
        - identify
        - information-gathering
        - passwords
        - post-exploitation
        - protect
        - reporting
        - respond
        - reverse-engineering
        - rfid
        - sniffing-spoofing
        - social-engineering
        - voip
        - vulnerability
        - web
        - windows-resources
        - wireless
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Merge Tools (rolling)
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-rolling:${{ matrix.TOOL }}
          ghcr.io/${{ github.repository_owner }}/kali-rolling:${{ matrix.TOOL }}
        push: true
        sources: |
          ghcr.io/${{ github.repository_owner }}/kali-cache:rolling-${{ matrix.TOOL }}-amd64
          ghcr.io/${{ github.repository_owner }}/kali-cache:rolling-${{ matrix.TOOL }}-arm64
    - name: Merge Tools (bleeding-edge)
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-bleeding-edge:${{ matrix.TOOL }}
          ghcr.io/${{ github.repository_owner }}/kali-bleeding-edge:${{ matrix.TOOL }}
        push: true
        sources: |
          ghcr.io/${{ github.repository_owner }}/kali-cache:bleeding-edge-${{ matrix.TOOL }}-amd64
          ghcr.io/${{ github.repository_owner }}/kali-cache:bleeding-edge-${{ matrix.TOOL }}-arm64

  Headless:
    needs: Base
    strategy:
      fail-fast: false
      matrix:
        KALI_VER:
        - rolling
        - bleeding-edge
        PLATFORM:
          - amd64
          - arm64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set tags metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-cache
          ghcr.io/${{ github.repository_owner }}/kali-cache
        tags: |
          ${{ matrix.KALI_VER }}-headless-${{ matrix.PLATFORM }}
    - name: Build And Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        push: true
        context: .
        build-args: |
          KALI_VER=${{ matrix.KALI_VER }}
        target: headless
        platforms: linux/${{ matrix.PLATFORM }}
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/kali-${{ matrix.KALI_VER }}:base
          ghcr.io/${{ github.repository_owner }}/kali-cache:${{ matrix.KALI_VER }}-headless-${{ matrix.PLATFORM }}
        cache-to: |
          type=inline
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  Merge_Headless:
    needs: Headless
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Get digests from ghcr.io/<owner>/binfmt
      run: |
        AMD64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        ARM64_DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/binfmt | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
        echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_ENV
        echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_ENV
    - name: Pull binfmt from ghcr.io
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          tonistiigi/binfmt
        sources: |
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.AMD64_DIGEST }}
          ghcr.io/${{ github.repository_owner }}/binfmt@${{ env.ARM64_DIGEST }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Merge Headless (rolling)
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-rolling:headless
          ghcr.io/${{ github.repository_owner }}/kali-rolling:headless
        push: true
        sources: |
          ghcr.io/${{ github.repository_owner }}/kali-cache:rolling-headless-amd64
          ghcr.io/${{ github.repository_owner }}/kali-cache:rolling-headless-arm64
    - name: Merge Tools (bleeding-edge)
      uses: int128/docker-manifest-create-action@v2
      with:
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/kali-bleeding-edge:headless
          ghcr.io/${{ github.repository_owner }}/kali-bleeding-edge:headless
        push: true
        sources: |
          ghcr.io/${{ github.repository_owner }}/kali-cache:bleeding-edge-headless-amd64
          ghcr.io/${{ github.repository_owner }}/kali-cache:bleeding-edge-headless-arm64

  Cleanup:
    needs: [Desktop, Labs, Merge_Nethunter, Merge_Tools, Merge_Headless]
    runs-on: ubuntu-latest
    steps:
    - name: Cleanup Docker cache image
      run: |
        curl -X DELETE -H "Authorization: token ${{ secrets.PACKAGE_DELETE_TOKEN }}" \
          https://api.github.com/user/packages/container/kali-cache
